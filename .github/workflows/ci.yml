name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  # Minimum line coverage required for CI to pass (used by coverage job)
  MIN_COVERAGE: "80"

jobs:
  lint:
    name: Lint (fmt + clippy)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry and target
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Compile (fast check)
    # Catch obvious compile errors quickly across workspace
      run: cargo check --workspace --all-targets

    - name: Run clippy
      run: cargo clippy --all-targets -- -D warnings

    - name: Run doctests
      run: cargo test --doc --workspace

  test:
    name: Test (unit + integration) (ubuntu)
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Ensure Docker is running (Ubuntu)
      run: |
        sudo service docker start
        docker info

    - name: Build
      run: cargo build --verbose

    - name: Run unit tests and non-smoke integration tests
      run: |
        set -euo pipefail
        # Discover non-smoke integration tests across workspace (filenames under tests/ not starting with smoke_)
        NON_SMOKE_TESTS=$(find crates -type f -path '*/tests/*.rs' -not -name 'smoke_*.rs' -printf '%f\n' | sed 's/\.rs$//' | sort -u)
        echo "Including non-smoke integration tests:"
        if [ -n "${NON_SMOKE_TESTS}" ]; then
          printf '%s\n' ${NON_SMOKE_TESTS}
        else
          echo "(none found)"
        fi
        # Run unit tests (libs, bins, examples, docs) and only the non-smoke integration tests
        cargo test --verbose --workspace --lib --bins --examples --doc $(printf -- '--test %s ' ${NON_SMOKE_TESTS}) -- --test-threads=1

  smoke:
    name: Smoke tests (ubuntu)
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry and target
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Ensure Docker is running
      run: |
        sudo service docker start
        docker info

    - name: Build
      run: cargo build --verbose

    - name: Run smoke tests (all smoke_*.rs)
      run: |
        set -euo pipefail
        # Discover smoke integration tests across workspace (filenames starting with smoke_)
        SMOKE_TESTS=$(find crates -type f -path '*/tests/smoke_*.rs' -printf '%f\n' | sed 's/\.rs$//' | sort -u)
        if [ -z "${SMOKE_TESTS}" ]; then
          echo "No smoke tests found."
          exit 1
        fi
        echo "Found smoke tests:"
        printf '%s\n' ${SMOKE_TESTS}
        cargo test --verbose $(printf -- '--test %s ' ${SMOKE_TESTS}) -- --test-threads=1

  coverage:
    name: Coverage (ubuntu)
    needs: lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-llvm-cov

    - name: Cache cargo registry and target
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-llvmcov-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-llvmcov-

    - name: Ensure Docker is running
      run: |
        sudo service docker start
        docker info

    - name: Generate coverage (fail under ${{ env.MIN_COVERAGE }}%)
      run: |
        mkdir -p coverage
        cargo llvm-cov --workspace --lcov --output-path coverage/lcov.info --text --fail-under-lines ${{ env.MIN_COVERAGE }} -- --test-threads=1 | tee -a "$GITHUB_STEP_SUMMARY"

    - name: Upload lcov artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-lcov
        path: coverage/lcov.info