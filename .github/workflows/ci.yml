name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  # Minimum line coverage required for CI to pass (used by coverage job)
  MIN_COVERAGE: "80"

jobs:
  lint:
    name: Lint (fmt + clippy)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry and target
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Compile (fast check)
    # Catch obvious compile errors quickly across workspace
      run: cargo check --workspace --all-targets

    - name: Run clippy
      run: cargo clippy --all-targets -- -D warnings

    - name: Run doctests
      run: cargo test --doc --workspace

  test:
    name: Test (unit + integration) (${{ matrix.os }})
    needs: lint
    runs-on: ${{ fromJSON(matrix.runs_on) }}
    env:
      HOMEBREW_NO_AUTO_UPDATE: 1
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu
            runs_on: '["ubuntu-latest"]'
          - os: macos
            runs_on: '["macos-13"]'
          # TODO: Re-enable Windows when a self-hosted runner with Docker is available
          # - os: windows
          #   runs_on: '["self-hosted","Windows","X64","docker"]'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Ensure Docker is running (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo service docker start
        docker info

    # Windows steps are disabled until a self-hosted runner is configured

    - name: Install and start Docker (macOS via Colima)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew install docker colima
        colima start --runtime docker --cpu 2 --memory 4 --disk 60
        docker context use colima
        docker info

    - name: Install Docker Compose plugin (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        # Ensure Compose v2 is available as a Docker CLI plugin
        set -euo pipefail
        mkdir -p ~/.docker/cli-plugins
        if ! docker compose version >/dev/null 2>&1; then
          echo "Installing Docker Compose v2 plugin..."
          COMPOSE_VERSION="v2.29.7"
          curl -sSL -o ~/.docker/cli-plugins/docker-compose \
            "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-darwin-x86_64"
          chmod +x ~/.docker/cli-plugins/docker-compose
        fi
        docker compose version

    - name: Set macOS TMPDIR for Colima mounts
      if: runner.os == 'macOS'
      shell: bash
      run: |
        # Use a temp directory under $HOME so Colima's VM can mount it
        mkdir -p "$RUNNER_TEMP"
        echo "TMPDIR=$RUNNER_TEMP" >> "$GITHUB_ENV"
        echo "TMP=$RUNNER_TEMP" >> "$GITHUB_ENV"
        echo "TEMP=$RUNNER_TEMP" >> "$GITHUB_ENV"
        echo "Using TMPDIR=$RUNNER_TEMP"

    - name: Build
      run: cargo build --verbose
      
    - name: Run unit/integration tests
      run: cargo test --verbose -- --test-threads=1 --skip smoke_basic

  smoke:
    name: Smoke tests (${{ matrix.os }})
    needs: lint
    runs-on: ${{ fromJSON(matrix.runs_on) }}
    env:
      HOMEBREW_NO_AUTO_UPDATE: 1
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu
            runs_on: '["ubuntu-latest"]'
          - os: macos
            runs_on: '["macos-13"]'
          # TODO: Re-enable Windows when a self-hosted runner with Docker is available
          # - os: windows
          #   runs_on: '["self-hosted","Windows","X64","docker"]'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry and target
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Ensure Docker is running (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo service docker start
        docker info

    # Windows steps are disabled until a self-hosted runner is configured

    - name: Install and start Docker (macOS via Colima)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew install docker colima
        colima start --runtime docker --cpu 2 --memory 4 --disk 60
        docker context use colima
        docker info

    - name: Install Docker Compose plugin (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        # Ensure Compose v2 is available as a Docker CLI plugin
        set -euo pipefail
        mkdir -p ~/.docker/cli-plugins
        if ! docker compose version >/dev/null 2>&1; then
          echo "Installing Docker Compose v2 plugin..."
          COMPOSE_VERSION="v2.29.7"
          curl -sSL -o ~/.docker/cli-plugins/docker-compose \
            "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-darwin-x86_64"
          chmod +x ~/.docker/cli-plugins/docker-compose
        fi
        docker compose version

    - name: Set macOS TMPDIR for Colima mounts
      if: runner.os == 'macOS'
      shell: bash
      run: |
        # Use a temp directory under $HOME so Colima's VM can mount it
        mkdir -p "$RUNNER_TEMP"
        echo "TMPDIR=$RUNNER_TEMP" >> "$GITHUB_ENV"
        echo "TMP=$RUNNER_TEMP" >> "$GITHUB_ENV"
        echo "TEMP=$RUNNER_TEMP" >> "$GITHUB_ENV"
        echo "Using TMPDIR=$RUNNER_TEMP"

    - name: Build
      run: cargo build --verbose

    - name: Run smoke tests only
      run: cargo test --verbose --test smoke_basic -- --test-threads=1

  coverage:
    name: Coverage (ubuntu)
    needs: lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-llvm-cov

    - name: Cache cargo registry and target
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-llvmcov-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-llvmcov-

    - name: Ensure Docker is running
      run: |
        sudo service docker start
        docker info

    - name: Generate coverage (fail under ${{ env.MIN_COVERAGE }}%)
      run: |
        mkdir -p coverage
        cargo llvm-cov --workspace --lcov --output-path coverage/lcov.info --text --fail-under-lines ${{ env.MIN_COVERAGE }} -- --test-threads=1 | tee -a "$GITHUB_STEP_SUMMARY"

    - name: Upload lcov artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-lcov
        path: coverage/lcov.info