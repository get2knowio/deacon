name: CI (Other OS)

on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: Lint (fmt + clippy) (${{ matrix.os }})
    runs-on: ${{ matrix.runs_on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos
            runs_on: macos-13
          - os: windows
            runs_on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry and target
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Compile (fast check)
      run: cargo check --workspace --all-targets

    - name: Run clippy
      run: cargo clippy --all-targets -- -D warnings

    - name: Run doctests
      run: cargo test --doc --workspace

  test:
    name: Test (unit + integration) (${{ matrix.os }})
    needs: lint
    runs-on: ${{ matrix.runs_on }}
    timeout-minutes: 45
    env:
      HOMEBREW_NO_AUTO_UPDATE: 1
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos
            runs_on: macos-13
          - os: windows
            runs_on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry and target
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install and start Docker (macOS via Colima)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew install docker colima
        colima start --runtime docker --cpu 2 --memory 4 --disk 60
        docker context use colima
        docker info

    - name: Install Docker Compose plugin (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p ~/.docker/cli-plugins
        if ! docker compose version >/dev/null 2>&1; then
          echo "Installing Docker Compose v2 plugin..."
          COMPOSE_VERSION="v2.29.7"
          curl -sSL -o ~/.docker/cli-plugins/docker-compose \
            "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-darwin-x86_64"
          chmod +x ~/.docker/cli-plugins/docker-compose
        fi
        docker compose version

    - name: Set macOS TMPDIR for Colima mounts
      if: runner.os == 'macOS'
      shell: bash
      run: |
        mkdir -p "$RUNNER_TEMP"
        echo "TMPDIR=$RUNNER_TEMP" >> "$GITHUB_ENV"
        echo "TMP=$RUNNER_TEMP" >> "$GITHUB_ENV"
        echo "TEMP=$RUNNER_TEMP" >> "$GITHUB_ENV"
        echo "Using TMPDIR=$RUNNER_TEMP"

    - name: Build
      run: cargo build --verbose

    - name: Run unit tests and non-smoke integration tests
      shell: bash
      run: |
        set -euo pipefail
        # Discover non-smoke integration tests across workspace (filenames under tests/ not starting with smoke_)
        NON_SMOKE_TESTS=$(find crates -type f -path '*/tests/*.rs' -not -name 'smoke_*.rs' -printf '%f\n' | sed 's/\.rs$//' | sort -u)
        echo "Including non-smoke integration tests:"
        if [ -n "${NON_SMOKE_TESTS}" ]; then
          printf '%s\n' ${NON_SMOKE_TESTS}
        else
          echo "(none found)"
        fi
        # Run unit tests (libs, bins, examples) first; docs are covered in lint job doctest step
        cargo test --verbose --workspace --lib --bins --examples -- --test-threads=1
        # Then only the non-smoke integration tests
        if [ -n "${NON_SMOKE_TESTS}" ]; then
          cargo test --verbose $(printf -- '--test %s ' ${NON_SMOKE_TESTS}) -- --test-threads=1
        fi

  smoke:
    name: Smoke tests (${{ matrix.os }})
    needs: lint
    runs-on: ${{ matrix.runs_on }}
    continue-on-error: ${{ matrix.os == 'windows' }}
    timeout-minutes: 45
    env:
      HOMEBREW_NO_AUTO_UPDATE: 1
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos
            runs_on: macos-13
          - os: windows
            runs_on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry and target
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install and start Docker (macOS via Colima)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew install docker colima
        colima start --runtime docker --cpu 2 --memory 4 --disk 60
        docker context use colima
        docker info

    - name: Install Docker Compose plugin (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p ~/.docker/cli-plugins
        if ! docker compose version >/dev/null 2>&1; then
          echo "Installing Docker Compose v2 plugin..."
          COMPOSE_VERSION="v2.29.7"
          curl -sSL -o ~/.docker/cli-plugins/docker-compose \
            "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-darwin-x86_64"
          chmod +x ~/.docker/cli-plugins/docker-compose
        fi
        docker compose version

    - name: Build
      run: cargo build --verbose

    - name: Run smoke tests (all smoke_*.rs)
      shell: bash
      run: |
        set -euo pipefail
        # Discover smoke integration tests across workspace (filenames starting with smoke_)
        SMOKE_TESTS=$(find crates -type f -path '*/tests/smoke_*.rs' -printf '%f\n' | sed 's/\.rs$//' | sort -u)
        if [ -z "${SMOKE_TESTS}" ]; then
          echo "No smoke tests found."
          exit 1
        fi
        echo "Found smoke tests:"
        printf '%s\n' ${SMOKE_TESTS}
        cargo test --verbose $(printf -- '--test %s ' ${SMOKE_TESTS}) -- --test-threads=1
      # If Windows smoke becomes flaky due to Docker absence, we could gate it with continue-on-error for Windows only.