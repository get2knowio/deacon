name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Get version
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false

  build:
    name: Build Release Binaries
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        
    - name: Install cross-compilation tools (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-
          
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
      
    - name: Create archive (Unix)
      if: runner.os != 'Windows'
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ../../../deacon-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz deacon
        cd ../../..
        
    - name: Create archive (Windows)
      if: runner.os == 'Windows'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../deacon-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip deacon.exe
        cd ../../..
        
    - name: Generate checksums (Unix)
      if: runner.os != 'Windows'
      run: |
        sha256sum deacon-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz > deacon-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz.sha256
        
    - name: Generate checksums (Windows)
      if: runner.os == 'Windows'
      run: |
        Get-FileHash -Algorithm SHA256 deacon-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip | ForEach-Object { "$($_.Hash.ToLower())  deacon-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip" } > deacon-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip.sha256
        
    - name: Upload archive artifact
      uses: actions/upload-artifact@v4
      with:
        name: deacon-${{ needs.create-release.outputs.version }}-${{ matrix.target }}
        path: |
          deacon-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.*
        
    - name: Upload Release Asset (Unix)
      if: runner.os != 'Windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./deacon-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz
        asset_name: deacon-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload Release Asset (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./deacon-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip
        asset_name: deacon-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip
        asset_content_type: application/zip

  checksums:
    name: Generate SHA256SUMS
    needs: [create-release, build]
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: deacon-${{ needs.create-release.outputs.version }}-*
        merge-multiple: true
        
    - name: Generate combined SHA256SUMS
      run: |
        # Combine all individual checksum files
        cat *.sha256 > SHA256SUMS
        # Verify the format and content
        cat SHA256SUMS
        
    - name: Upload SHA256SUMS
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./SHA256SUMS
        asset_name: SHA256SUMS
        asset_content_type: text/plain